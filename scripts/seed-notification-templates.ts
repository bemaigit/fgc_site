// Script para criar templates iniciais de notifica√ß√£o
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const templates = [
  // Template de WhatsApp para Boas-vindas
  {
    name: 'Boas-vindas',
    type: 'WELCOME',
    channel: 'whatsapp',
    content: 'Ol√° {{nome}}, bem-vindo(a) √† Federa√ß√£o Goiana de Ciclismo! üö¥‚Äç‚ôÇÔ∏è Estamos felizes em ter voc√™ conosco. Acesse nosso site para mais informa√ß√µes sobre eventos e filia√ß√£o.',
    variables: ['nome'],
    active: true
  },
  // Template de WhatsApp para Lembrete de Evento
  {
    name: 'Lembrete de Evento',
    type: 'EVENT_REMINDER',
    channel: 'whatsapp',
    content: 'Lembrete: O evento "{{evento}}" acontecer√° em {{data}} √†s {{hora}} no local {{local}}. N√£o esque√ßa de levar seu equipamento e documentos. Esperamos voc√™ l√°!',
    variables: ['evento', 'data', 'hora', 'local'],
    active: true
  },
  // Template de WhatsApp para Confirma√ß√£o de Inscri√ß√£o
  {
    name: 'Confirma√ß√£o de Inscri√ß√£o',
    type: 'REGISTRATION_CONFIRMATION',
    channel: 'whatsapp',
    content: 'Sua inscri√ß√£o para o evento "{{evento}}" foi confirmada! N√∫mero do atleta: {{numero}}. Data: {{data}}. Para mais detalhes, acesse nossa plataforma.',
    variables: ['evento', 'numero', 'data'],
    active: true
  },
  // Template de Email para Boas-vindas
  {
    name: 'Email de Boas-vindas',
    type: 'WELCOME',
    channel: 'email',
    content: '<h1>Bem-vindo √† Federa√ß√£o Goiana de Ciclismo!</h1><p>Ol√° {{nome}},</p><p>√â com grande prazer que damos as boas-vindas a voc√™ em nossa comunidade de ciclismo.</p><p>Seu cadastro foi realizado com sucesso e voc√™ j√° pode acessar todos os nossos servi√ßos.</p><p>Atenciosamente,<br>Equipe FGC</p>',
    variables: ['nome'],
    active: true
  },
  // Template de Email para Resultados de Competi√ß√£o
  {
    name: 'Resultados de Competi√ß√£o',
    type: 'COMPETITION_RESULTS',
    channel: 'email',
    content: '<h1>Resultados - {{evento}}</h1><p>Ol√° {{nome}},</p><p>Os resultados da competi√ß√£o "{{evento}}" j√° est√£o dispon√≠veis!</p><p>Sua classifica√ß√£o: {{posicao}}¬∫ lugar</p><p>Tempo: {{tempo}}</p><p>Parab√©ns pela participa√ß√£o!</p><p>Veja a classifica√ß√£o completa em nosso site.</p>',
    variables: ['nome', 'evento', 'posicao', 'tempo'],
    active: true
  }
];

async function main() {
  console.log('Iniciando cria√ß√£o de templates...');
  
  for (const template of templates) {
    try {
      // Gerar ID consistente baseado no tipo e canal (usando template.name como seed)
      const templateId = `${template.type}_${template.channel}_${template.name.replace(/\s+/g, '_').toLowerCase()}`;
      
      const result = await prisma.notificationTemplate.upsert({
        where: {
          id: templateId
        },
        update: {
          ...template,
          updatedAt: new Date()
        },
        create: {
          ...template,
          id: templateId,
          updatedAt: new Date()
        }
      });
      
      console.log(`Template criado/atualizado: ${result.name}`);
    } catch (error) {
      console.error(`Erro ao criar template ${template.name}:`, error);
    }
  }
  
  console.log('Templates criados com sucesso!');
}

main()
  .catch(e => {
    console.error('Erro durante execu√ß√£o do script:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
